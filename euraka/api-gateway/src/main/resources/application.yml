
spring:
  application:
    name: api-gateway
  redis:
    host: localhost
    part: 6379
    database: 0
    password: 123
  zipkin:
    #base-url: http://127.0.0.1:9411
    base-url: http://127.0.0.1:5672
    sender:
      #type: web #数据的传输方式，以http的形式向server端发送数据
      type: rabbit # 以rabbitmq的方式来实现异步传输
  sleuth:
    sampler:
      probability: 1 # 采样比，1是完全采样
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
    listener: #设置请求重试策略
      direct:
        retry:
          enabled: true
      simple:
        retry:
          enabled: true
  cloud:
    gateway:
      discovery: # 设置服务发现，这样可以不用为每个服务配置路由，默认根据服务名来路由
        locator:
          enabled: true # 默认false
          lower-case-service-id: true # 服务中心中 服务名一般为大写，所以需要配置成小写
#      default-filters: #全局 过滤器配置
#        - name: RequestRateLimiter # 配置RequestRateLimiter过滤器，他是采用令牌桶算法来进行限流的
#          args:
#            key-resolver: '#{@keyResolver}'  # key 解析器，在这个过滤器中是以redis作为桶的，需要设置一个key 解析器
#            redis-rate-limiter.replenishRate: 1 # 每秒产生令牌的速率
#            redis-rate-limiter.burstCapacity: 3 # 令牌桶容量
#      routes: # 设置路由转发规则
#        - id: eureka-consumer  # 设置路由id，保证唯一性即可
#          # uri: http://127.0.0.1:9002  # 具体转发的url地址
#          uri: lb://eureka-consumer # 根据注册中心的服务名进行转发，scheme协议为 lb://
#          predicates:  # 断言，只有断言为true才会被转发，gateway内置了很多的断言规则，-Path,是根据路径进行判断，只有发送过来的路径符合/eureka-consumer/**才会被转发
#            - Path=/eureka-consumer/**
#          filters:  # 过滤器，Gateway的过滤器根据范围分为两种，一个是GatewayFilter，一个是GlobalFilter
#          #  - StripPrefix=1 # StripPrefix过滤器，清除前n个路径，比如- StripPrefix=1 ==》http://127.0.0.1:8080/eureka-consumer/consumer/getFeign-》http://127.0.0.1:8080/consumer/getFeign
##            - name: RequestRateLimiter
##              args:
##                key-resolver: '#{@keyResolver}'
##                redis-rate-limiter.replenishRate: 1
##                redis-rate-limiter.burstCapacity: 3
#            - RewritePath=/eureka-consumer/(?<segment>.*),/$\{segment} # 路径重写过滤器，后面的值是正则表达式，功能和StripPrefix过滤器一致
server:
  port: 8081
eureka:
  instance:
    instance-id: ${spring.cloud.client.ip-address}:${server.port}
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://127.0.0.1:9000/eureka/
# 配置 路由追踪日志打印
logging:
  level:
    root: info
    org.springframework.web.servlet.DispatcherServlet: debug
    org.springframework.cloud.sleuth: debug
